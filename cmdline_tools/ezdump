#!/bin/bash

#TODO: refactoring, static segments, (may be) dumping by regexp

[ "root" != "$USER" ] && exec sudo $0 "$@" 2>/dev/null

rname=$(basename $0)

# don't forget to `sudo chmod +s ...`

print_usage() {
        echo "Usage: $rname [OPTION]..."
        echo "Simple dumper of process memory via /proc/... subsystem"
        echo "Options:"
        echo "-h        print usage"
        echo "-m        print mappings of process"
        echo "-a        dump all found memory regions (full dump)"
        echo "             by default dumping only dynamically allocated regions"
        echo "             like heap, stack, vdso etc."
        echo "-s        include static regions like .text, .data, .bss etc."
        echo "-p        pid of process to dump"
}


PID="None"
mapping=false
all_dump=false
include_static=false

if [ "$#" == "0" ]; then print_usage; exit 1; fi

while [ -n "$1" ]
do
    case "$1" in
        -p) shift; PID=$(("$1")) ;;
        -a) all_dump=true;;
        -s) include_static=true ;;
        -h) print_usage; exit 0 ;;
		-m) mapping=true ;;
        *)  echo "[!] Invalid option - $1"
    esac
    shift
done

if [ "$PID" = "None" ]; then
    echo "[!] PID didn't specified"
    exit 1
fi

if [ "$mapping" = "true" ]; then
    cat "/proc/$PID/maps"
    exit 0
fi

if [ "$include_static" = "true" ]; then
    cmd=$(basename -z "$(cat "/proc/$PID/cmdline")")
    if [ "$cmd" = "" ]; then echo "[!] Can\'t fetch process cmdline properly"; exit 1; fi
fi

echo $PID;
if [ "$all_dump" != "true" ]; then
    # default dump branch

    cat /proc/$PID/maps | grep -v / | while read line; do
        line=${line%% *};
        start=${line%-*};
        stop=${line#*-};
        dd if=/proc/$PID/mem \
            of=pid-$PID-$start-$stop.raw \
            bs=512 \
            skip=$((0x$start / 512)) \
            count=$(((0x$stop - 0x$start) / 512)) >&- 2>&-;
        if [ "$verbose" = true ]; then echo "$PID-$start-$stop.raw"; fi
    done
else
    # full dump branch

    cat /proc/$PID/maps | while read line; do
        line=${line%% *};
        start=${line%-*};
        stop=${line#*-};
        dd if=/proc/$PID/mem \
            of=pid-$PID-$start-$stop.raw \
            bs=512 \
            skip=$((0x$start / 512)) \
            count=$(((0x$stop - 0x$start) / 512)) >&- 2>&-;
        if [ "$verbose" = true ]; then echo "$PID-$start-$stop.raw"; fi
    done
fi
